#include "dynarray_$T.h"
#include <stdlib.h>

void dynarray_$T_resize(dynarray_$T* da, size_t newsize) {
  da->capacity = newsize;
  da->buffer = REALLOC(da->buffer, newsize * sizeof(^T));
}

dynarray_$T dynarray_$T_create() {
  dynarray_$T a = (dynarray_$T) {
    .buffer = 0,
    .size = 0,
    .capacity = 10,
  };
  dynarray_$T_resize(&a, a.capacity);
  return a;
}
void dynarray_$T_free(dynarray_$T* da) {
  free(da->buffer);
}
void dynarray_$T_pushback(dynarray_$T* da, ^T val) {
  if (da->size + 1 >= da->capacity) dynarray_$T_resize(da, da->capacity * 2);
  da->buffer[da->size++] = val;
}
result_dynarray_$T_at dynarray_$T_at(dynarray_$T* da, int index) {
  if (index >= da->size) return result_err(dynarray_$T_at, "index out of range");
  return result_ok(dynarray_$T_at, da->buffer[index]);
}
